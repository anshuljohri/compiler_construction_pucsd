Token: KEYWORD      [  PROGRAM  ]
	New Symbol Table is created
Token: Identifier   [  example  ]
Token: SpecialChars [  ;  ]
Token: KEYWORD      [  VAR  ]
Token: Identifier   [  x  ]
		IDENTIFIER is x
In Temp and counter is 0
	Inserted Temperoray
Token: SpecialChars [  ,  ]
Token: Identifier   [  y  ]
		 IDENTIFIER is y
In Temp and counter is 1
	Inserted Temperoray
Token: SpecialChars [  :  ]
Token: KEYWORD      [  INTEGER  ]
Token: SpecialChars [  ;  ]
	SYMBOL x Inserted Successfully IN Basic Table And its TYPE is INTEGER
	SYMBOL y Inserted Successfully IN Basic Table And its TYPE is INTEGER
Token: Identifier   [  ravi  ]
		IDENTIFIER is ravi
In Temp and counter is 0
	Inserted Temperoray
Token: SpecialChars [  ,  ]
Token: Identifier   [  harsh  ]
		 IDENTIFIER is harsh
In Temp and counter is 1
	Inserted Temperoray
Token: SpecialChars [  :  ]
Token: KEYWORD      [  FLOAT  ]
Token: SpecialChars [  ;  ]
	SYMBOL ravi Inserted Successfully IN Basic Table And its TYPE is FLOAT
	SYMBOL harsh Inserted Successfully IN Basic Table And its TYPE is FLOAT
Token: KEYWORD      [  FUNCTION  ]
	New Symbol Table is created
Token: Identifier   [  gcd  ]
Token: SpecialChars [  (  ]
Token: Identifier   [  z  ]
		IDENTIFIER is z
In Temp and counter is 0
	Inserted Temperoray
Token: SpecialChars [  ,  ]
Token: Identifier   [  b  ]
		 IDENTIFIER is b
In Temp and counter is 1
	Inserted Temperoray
Token: SpecialChars [  :  ]
Token: KEYWORD      [  INTEGER  ]
In Temp Inserted Types and counter is 0
In Temp Inserted Types and counter is 1
	Inserted Types Temporary
	SYMBOL z Inserted Successfully IN Basic Table And its TYPE is INTEGER
	SYMBOL b Inserted Successfully IN Basic Table And its TYPE is INTEGER
Token: SpecialChars [  ;  ]
Token: Identifier   [  shaz  ]
		IDENTIFIER is shaz
In Temp and counter is 0
	Inserted Temperoray
Token: SpecialChars [  ,  ]
Token: Identifier   [  vaz  ]
		 IDENTIFIER is vaz
In Temp and counter is 1
	Inserted Temperoray
Token: SpecialChars [  :  ]
Token: KEYWORD      [  FLOAT  ]
In Temp Inserted Types and counter is 2
In Temp Inserted Types and counter is 3
Inserted Types Temporary
	SYMBOL shaz Inserted Successfully IN Basic Table And its TYPE is FLOAT
	SYMBOL vaz Inserted Successfully IN Basic Table And its TYPE is FLOAT
Token: SpecialChars [  )  ]
Token: SpecialChars [  :  ]
Token: KEYWORD      [  INTEGER  ]
Token: SpecialChars [  ;  ]
		FUNCTION  IDENTIFIER is gcd
	SYMBOL gcd Inserted Successfully In the Previous Symbol table And its TYPE is FI
	Function Identifier gcd Has its 0th Argument Type INTEGER
	Function Identifier gcd Has its 1th Argument Type INTEGER
	Function Identifier gcd Has its 2th Argument Type FLOAT
	Function Identifier gcd Has its 3th Argument Type FLOAT
Token: KEYWORD      [  BEGIN  ]
Token: Identifier   [  x  ]
Token: AssignMent   [  :=  ]
		Befor for ps->top is 1
		In Check Function H->probe is (null) and ps->top is 1
		In Check Function H->probe is x and ps->top is 1
		INSIDE IF
		YES Identifier x is Declared And Its Type is INTEGER
Token: IntNum       [  12  ]
		Assifnment is of Type INTEGER
Token: SpecialChars [  ;  ]
		Assignment Type Matched
 Token: Identifier   [  shaz  ]
Token: AssignMent   [  :=  ]
		Befor for ps->top is 1
		In Check Function H->probe is shaz and ps->top is 1
		INSIDE IF
		YES Identifier shaz is Declared And Its Type is FLOAT
Token: Identifier   [  vaz  ]
Token: KEYWORD      [  END  ]
		Befor for ps->top is 1
		In Check Function H->probe is vaz and ps->top is 1
		INSIDE IF
		YES Identifier vaz is Declared And Its Type is FLOAT
		Assignment Type Matched
 	CURRENT Symbol Table is Removed
Token: SpecialChars [  ;  ]
Token: KEYWORD      [  BEGIN  ]
Token: KEYWORD      [  READ  ]
Token: SpecialChars [  (  ]
Token: Identifier   [  x  ]
Token: SpecialChars [  )  ]
		Befor for ps->top is 0
		In Check Function H->probe is x and ps->top is 0
		INSIDE IF
		YES Identifier x is Declared And Its Type is INTEGER
Token: SpecialChars [  ;  ]
Token: KEYWORD      [  READ  ]
Token: SpecialChars [  (  ]
Token: Identifier   [  y  ]
Token: SpecialChars [  )  ]
		Befor for ps->top is 0
		In Check Function H->probe is y and ps->top is 0
		INSIDE IF
		YES Identifier y is Declared And Its Type is INTEGER
Token: SpecialChars [  ;  ]
Token: KEYWORD      [  WHILE  ]
Token: SpecialChars [  (  ]
Token: Identifier   [  x  ]
Token: RelOp        [  <>  ]
		Befor for ps->top is 0
		In Check Function H->probe is x and ps->top is 0
		INSIDE IF
		YES Identifier x is Declared And Its Type is INTEGER
Token: IntNum       [  0  ]
		Assifnment is of Type INTEGER
Token: SpecialChars [  )  ]
Token: KEYWORD      [  OR  ]
Token: SpecialChars [  (  ]
Token: Identifier   [  y  ]
Token: RelOp        [  <>  ]
		Befor for ps->top is 0
		In Check Function H->probe is y and ps->top is 0
		INSIDE IF
		YES Identifier y is Declared And Its Type is INTEGER
Token: IntNum       [  0  ]
		Assifnment is of Type INTEGER
Token: SpecialChars [  )  ]
Token: KEYWORD      [  DO  ]
Token: KEYWORD      [  BEGIN  ]
Token: Identifier   [  x  ]
Token: AssignMent   [  :=  ]
		Befor for ps->top is 0
		In Check Function H->probe is x and ps->top is 0
		INSIDE IF
		YES Identifier x is Declared And Its Type is INTEGER
Token: Identifier   [  ravi  ]
Token: SpecialChars [  ;  ]
		Befor for ps->top is 0
		In Check Function H->probe is ravi and ps->top is 0
		INSIDE IF
		YES Identifier ravi is Declared And Its Type is FLOAT
		Assignment Type MisMatched
Token: Identifier   [  harsh  ]
Token: AssignMent   [  :=  ]
		Befor for ps->top is 0
		In Check Function H->probe is harsh and ps->top is 0
		INSIDE IF
		YES Identifier harsh is Declared And Its Type is FLOAT
Token: IntNum       [  123  ]
		Assifnment is of Type INTEGER
Token: SpecialChars [  ;  ]
		Assignment Type MisMatched
Token: Identifier   [  shaz  ]
Token: AssignMent   [  :=  ]
		Befor for ps->top is 0
		In Check Function H->probe is (null) and ps->top is 0
		ERROR: Identifier shaz is Not Declared 
	ERROR: Symbol shaz is NOT Present
Token: IntNum       [  12  ]
		Assifnment is of Type INTEGER
Token: SpecialChars [  ;  ]
		Assignment Type MisMatched
Token: KEYWORD      [  WRITE  ]
Token: SpecialChars [  (  ]
Token: Identifier   [  gcd  ]
Token: SpecialChars [  (  ]
Token: Identifier   [  x  ]
Token: SpecialChars [  ,  ]
		Befor for ps->top is 0
		In Check Function H->probe is x and ps->top is 0
		INSIDE IF
		YES Identifier x is Declared And Its Type is INTEGER
Token: Identifier   [  y  ]
Token: SpecialChars [  )  ]
		Befor for ps->top is 0
		In Check Function H->probe is y and ps->top is 0
		INSIDE IF
		YES Identifier y is Declared And Its Type is INTEGER
Token: SpecialChars [  )  ]
Token: SpecialChars [  ;  ]
Token: KEYWORD      [  READ  ]
Token: SpecialChars [  (  ]
Token: Identifier   [  x  ]
Token: SpecialChars [  )  ]
		Befor for ps->top is 0
		In Check Function H->probe is x and ps->top is 0
		INSIDE IF
		YES Identifier x is Declared And Its Type is INTEGER
Token: SpecialChars [  ;  ]
Token: KEYWORD      [  READ  ]
Token: SpecialChars [  (  ]
Token: Identifier   [  y  ]
Token: SpecialChars [  )  ]
		Befor for ps->top is 0
		In Check Function H->probe is y and ps->top is 0
		INSIDE IF
		YES Identifier y is Declared And Its Type is INTEGER
Token: KEYWORD      [  END  ]
	CURRENT Symbol Table is Removed
Token: KEYWORD      [  END  ]
	CURRENT Symbol Table is Removed
		----- Correct----- 
